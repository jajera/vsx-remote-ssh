name: Release to Open VSX Registry

on:
  workflow_dispatch:
  push:
    branches: 
      - main

permissions:
  contents: write
  packages: write

jobs:
  validate:
    uses: ./.github/workflows/validate.yml
    with:
      package-extension: true

  release:
    needs: validate
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Package extension
        id: package_vsix
        run: |
          npm run package
          echo "vsix_path=$(ls *.vsix)" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check for new version
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if this version was already released
          if git tag | grep -q "v$CURRENT_VERSION"; then
            echo "Version $CURRENT_VERSION already released, skipping"
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "New version $CURRENT_VERSION detected, will create release"
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
            echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Verify Publisher and Extension Info
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true'
        run: |
          echo "üìã Extension Information:"
          echo "Name: $(node -p "require('./package.json').name")"
          echo "Publisher: $(node -p "require('./package.json').publisher")"
          echo "Version: $(node -p "require('./package.json').version")"
          echo "Display Name: $(node -p "require('./package.json').displayName")"
          echo ""
          echo "‚ö†Ô∏è  IMPORTANT: Make sure your Open VSX Registry account matches the publisher name!"
          echo "Current publisher: $(node -p "require('./package.json').publisher")"
          echo "GitHub username: ${{ github.repository_owner }}"
          echo "If this doesn't match your Open VSX account, update package.json publisher field."

      - name: Publish to Open VSX Registry
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true'
        run: |
          if [ -z "$OVSX_PAT" ]; then
            echo "‚ùå OVSX_PAT secret not set. Skipping Open VSX Registry publish."
            echo "To enable publishing, add OVSX_PAT to repository secrets."
            echo "Get your token from: https://open-vsx.org/user-settings/tokens"
            exit 0
          fi
          
          echo "üì¶ Publishing version ${{ steps.version_check.outputs.NEW_VERSION }} to Open VSX Registry..."
          echo "Publisher: $(node -p "require('./package.json').publisher")"
          echo "Extension: vsx-remote-ssh"
          echo "Registry: https://open-vsx.org"
          
          # Publish to Open VSX Registry using ovsx CLI
          npx ovsx publish --packagePath ${{ steps.package_vsix.outputs.vsix_path }}
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully published to Open VSX Registry!"
            echo "üîó View your extension at: https://open-vsx.org/extension/$(node -p "require('./package.json').publisher")/vsx-remote-ssh"
          else
            echo "‚ùå Failed to publish to Open VSX Registry"
            echo ""
            echo "üîß Troubleshooting steps:"
            echo "1. Check your OVSX_PAT token at: https://open-vsx.org/user-settings/tokens"
            echo "2. Verify your Open VSX account matches publisher: $(node -p "require('./package.json').publisher")"
            echo "3. Make sure the token has publish permissions"
            echo "4. Check if the extension name is already taken"
            exit 1
          fi
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Create GitHub Release
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true'
        run: |
          echo "üì¶ Creating GitHub release for version ${{ steps.version_check.outputs.NEW_VERSION }}..."
          
          # Create release using GitHub CLI
          gh release create "v${{ steps.version_check.outputs.NEW_VERSION }}" \
            --title "Release ${{ steps.version_check.outputs.NEW_VERSION }}" \
            --notes "## SSH Remote Extension ${{ steps.version_check.outputs.NEW_VERSION }}

          ### What's New
          - See [CHANGELOG.md](CHANGELOG.md) for detailed changes

          ### Installation
          \`\`\`bash
          # From Open VSX Registry
          # Search for \"SSH Remote\" and install

          # Or from VSIX file
          code --install-extension vsx-remote-ssh-${{ steps.version_check.outputs.NEW_VERSION }}.vsix
          \`\`\`

          ### Features
          - üîê Secure SSH Connections
          - üìÅ Remote File System
          - üñ•Ô∏è Integrated Terminal
          - üìä Performance Monitoring
          - üóÇÔ∏è Workspace Management

          ### Documentation
          - [README.md](README.md) - User guide
          - [PUBLISHING.md](PUBLISHING.md) - Development guide" \
            --draft=false \
            --prerelease=false \
            "${{ steps.package_vsix.outputs.vsix_path }}"
          
          echo "‚úÖ GitHub release created successfully!"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: |
            *.vsix
            out/
          retention-days: 30
