name: Release to Open VSX Registry

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Security audit
        run: npm audit --audit-level=moderate

      - name: Build extension
        run: npm run compile

      - name: Package extension
        id: package_vsix
        run: |
          npm run package
          echo "vsix_path=$(ls *.vsix)" >> $GITHUB_OUTPUT
          echo "version=$(node -p "require('./package.json').version")" >> $GITHUB_OUTPUT

      - name: Check for new version
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"

          # Check if this version was already released
          if git tag | grep -q "v$CURRENT_VERSION"; then
            echo "Version $CURRENT_VERSION already released, skipping"
            echo "SHOULD_RELEASE=false" >> $GITHUB_OUTPUT
          else
            echo "New version $CURRENT_VERSION detected, will create release"
            echo "SHOULD_RELEASE=true" >> $GITHUB_OUTPUT
            echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: Check and Create Namespace
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true'
        run: |
          echo "üîç Checking if namespace exists in Open VSX Registry..."
          
          # Install ovsx CLI
          npm install -g ovsx
          
          # Check if namespace exists using Open VSX search API
          SEARCH_RESULT=$(curl -s "https://open-vsx.org/api/-/search?query=${{ github.repository_owner }}" | jq -r '.totalSize // 0')
          
          if [ "$SEARCH_RESULT" -gt 0 ]; then
            echo "‚úÖ Namespace '${{ github.repository_owner }}' already exists in Open VSX Registry"
            echo "NAMESPACE_EXISTS=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Namespace '${{ github.repository_owner }}' does not exist in Open VSX Registry"
            echo "Creating namespace now..."
            
            # Create namespace using GitHub username
            ovsx create-namespace ${{ github.repository_owner }}
            
            if [ $? -eq 0 ]; then
              echo "‚úÖ Namespace '${{ github.repository_owner }}' created successfully!"
              echo "NAMESPACE_EXISTS=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Failed to create namespace '${{ github.repository_owner }}'"
              echo "Check your OVSX_PAT token and permissions"
              echo "NAMESPACE_EXISTS=false" >> $GITHUB_OUTPUT
              exit 1
            fi
          fi
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Verify Publisher and Extension Info
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true'
        run: |
          echo "üìã Extension Information:"
          echo "Name: $(node -p "require('./package.json').name")"
          echo "Publisher: $(node -p "require('./package.json').publisher")"
          echo "Version: $(node -p "require('./package.json').version")"
          echo "Display Name: $(node -p "require('./package.json').displayName")"
          echo ""
          echo "‚ö†Ô∏è  IMPORTANT: Make sure your Open VSX Registry account matches the publisher name!"
          echo "Current publisher: $(node -p "require('./package.json').publisher")"
          echo "GitHub username: ${{ github.repository_owner }}"
          echo "If this doesn't match your Open VSX account, update package.json publisher field."

      - name: Publish to Open VSX Registry
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true' && steps.check_namespace.outputs.NAMESPACE_EXISTS == 'true'
        run: |
          if [ -z "$OVSX_PAT" ]; then
            echo "‚ùå OVSX_PAT secret not set. Skipping Open VSX Registry publish."
            echo "To enable publishing, add OVSX_PAT to repository secrets."
            echo "Get your token from: https://open-vsx.org/user-settings/tokens"
            exit 0
          fi
          
          echo "üì¶ Publishing version ${{ steps.version_check.outputs.NEW_VERSION }} to Open VSX Registry..."
          echo "Publisher: $(node -p "require('./package.json').publisher")"
          echo "Extension: vsx-remote-ssh"
          echo "Registry: https://open-vsx.org"
          
          # Publish to Open VSX Registry using ovsx CLI
          npx ovsx publish --packagePath ${{ steps.package_vsix.outputs.vsix_path }}
          
          if [ $? -eq 0 ]; then
            echo "‚úÖ Successfully published to Open VSX Registry!"
            echo "üîó View your extension at: https://open-vsx.org/extension/$(node -p "require('./package.json').publisher")/vsx-remote-ssh"
          else
            echo "‚ùå Failed to publish to Open VSX Registry"
            echo ""
            echo "üîß Troubleshooting steps:"
            echo "1. Check your OVSX_PAT token at: https://open-vsx.org/user-settings/tokens"
            echo "2. Verify your Open VSX account matches publisher: $(node -p "require('./package.json').publisher")"
            echo "3. Make sure the token has publish permissions"
            echo "4. Check if the extension name is already taken"
            exit 1
          fi
        env:
          OVSX_PAT: ${{ secrets.OVSX_PAT }}

      - name: Create GitHub Release
        if: steps.version_check.outputs.SHOULD_RELEASE == 'true' && steps.check_namespace.outputs.NAMESPACE_EXISTS == 'true'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version_check.outputs.NEW_VERSION }}
          name: Release ${{ steps.version_check.outputs.NEW_VERSION }}
          files: ${{ steps.package_vsix.outputs.vsix_path }}
          generate_release_notes: true
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-build
          path: |
            *.vsix
            out/
          retention-days: 30
