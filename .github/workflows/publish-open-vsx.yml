name: CI/CD - Open VSX Registry

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-and-publish:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: "20"
        cache: "npm"
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run linting
      run: npm run lint
      
    - name: Run tests
      run: npm test
      
    - name: Security audit
      run: npm audit --audit-level=moderate
      
    - name: Build extension
      run: npm run compile
      
    - name: Package extension
      run: npm run package
      
    - name: Auto Version Increment
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      id: version
      run: |
        # Get current version from package.json
        CURRENT_VERSION=$(node -p "require('./package.json').version")
        echo "Current version: $CURRENT_VERSION"
        
        # Check if this version was already published
        if git tag | grep -q "v$CURRENT_VERSION"; then
          echo "Version $CURRENT_VERSION already exists, incrementing..."
          
          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Increment patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          
          echo "Incrementing version from $CURRENT_VERSION to $NEW_VERSION"
          
          # Update package.json
          node -e "
            const fs = require('fs');
            const pkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            pkg.version = '$NEW_VERSION';
            fs.writeFileSync('package.json', JSON.stringify(pkg, null, 2) + '\n');
          "
          
          # Create git tag
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add package.json
          git commit -m "Auto-increment version to $NEW_VERSION [skip ci]"
          git tag "v$NEW_VERSION"
          git push origin main
          git push origin "v$NEW_VERSION"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CHANGED=true" >> $GITHUB_OUTPUT
        else
          echo "Version $CURRENT_VERSION is new, using as-is"
          echo "NEW_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_CHANGED=false" >> $GITHUB_OUTPUT
        fi
      
    - name: Package extension with new version
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: npm run package
      
    - name: Publish to Open VSX Registry
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: npx @vscode/vsce publish -p ${{ secrets.OVSX_PAT }}
      env:
        OVSX_PAT: ${{ secrets.OVSX_PAT }}
        
    - name: Create Release
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ steps.version.outputs.NEW_VERSION }}
        name: Release ${{ steps.version.outputs.NEW_VERSION }}
        files: |
          *.vsix
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: extension-build
        path: |
          *.vsix
          out/
        retention-days: 30
